type Query {
  me: User!
  users(query: String): [User!]!
  posts: [Post!]!
  comments: [Comment!]!
}

enum MutationType {
  CREATED
  UPDATED
  DELETE
}

type CommentSubscritpionPayload {
  type: MutationType!
  comment: Comment!
}

type Subscription {
  count: Int!
  comment(postId: String!): CommentSubscritpionPayload!
}

type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!,data: UpdateUserInput!): User!
  createComment(data: CreateCommentInput): Comment!
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input CreateCommentInput {
  userId: String!
  postId: String!
  title: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID
  title: String
  body: String
  published: Boolean
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID
  title: String
  author: User!
  post: Post!
}
